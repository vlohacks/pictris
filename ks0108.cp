#line 1 "C:/PIC/tetris/ks0108.c"
#line 1 "c:/pic/tetris/ks0108.h"
#line 75 "c:/pic/tetris/ks0108.h"
void ks0108_enable(void);
void ks0108_init(void);
void ks0108_fill(unsigned char);
void ks0108_locate(unsigned char, unsigned char);
void ks0108_command(unsigned char, unsigned char);
unsigned char ks0108_data_read();
void ks0108_data_write(unsigned char);

void ks0108_pset(unsigned short, unsigned short, unsigned short);
void ks0108_rect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short);
void ks0108_char(unsigned short, unsigned short, unsigned char, unsigned char);
void ks0108_char_portrait(unsigned short, unsigned short, unsigned char, unsigned char);
void ks0108_title(unsigned short, unsigned short);
#line 1 "c:/pic/tetris/font5x7.h"



code static const char font5x7[] = {
 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x5F, 0x00, 0x00,
 0x00, 0x07, 0x00, 0x07, 0x00,
 0x14, 0x7F, 0x14, 0x7F, 0x14,
 0x24, 0x2A, 0x7F, 0x2A, 0x12,
 0x23, 0x13, 0x08, 0x64, 0x62,
 0x36, 0x49, 0x55, 0x22, 0x50,
 0x00, 0x05, 0x03, 0x00, 0x00,
 0x00, 0x1C, 0x22, 0x41, 0x00,
 0x00, 0x41, 0x22, 0x1C, 0x00,
 0x08, 0x2A, 0x1C, 0x2A, 0x08,
 0x08, 0x08, 0x3E, 0x08, 0x08,
 0x00, 0x50, 0x30, 0x00, 0x00,
 0x08, 0x08, 0x08, 0x08, 0x08,
 0x00, 0x30, 0x30, 0x00, 0x00,
 0x20, 0x10, 0x08, 0x04, 0x02,
 0x3E, 0x51, 0x49, 0x45, 0x3E,
 0x00, 0x42, 0x7F, 0x40, 0x00,
 0x42, 0x61, 0x51, 0x49, 0x46,
 0x21, 0x41, 0x45, 0x4B, 0x31,
 0x18, 0x14, 0x12, 0x7F, 0x10,
 0x27, 0x45, 0x45, 0x45, 0x39,
 0x3C, 0x4A, 0x49, 0x49, 0x30,
 0x01, 0x71, 0x09, 0x05, 0x03,
 0x36, 0x49, 0x49, 0x49, 0x36,
 0x06, 0x49, 0x49, 0x29, 0x1E,
 0x00, 0x36, 0x36, 0x00, 0x00,
 0x00, 0x56, 0x36, 0x00, 0x00,
 0x00, 0x08, 0x14, 0x22, 0x41,
 0x14, 0x14, 0x14, 0x14, 0x14,
 0x41, 0x22, 0x14, 0x08, 0x00,
 0x02, 0x01, 0x51, 0x09, 0x06,
 0x32, 0x49, 0x79, 0x41, 0x3E,
 0x7E, 0x11, 0x11, 0x11, 0x7E,
 0x7F, 0x49, 0x49, 0x49, 0x36,
 0x3E, 0x41, 0x41, 0x41, 0x22,
 0x7F, 0x41, 0x41, 0x22, 0x1C,
 0x7F, 0x49, 0x49, 0x49, 0x41,
 0x7F, 0x09, 0x09, 0x01, 0x01,
 0x3E, 0x41, 0x41, 0x51, 0x32,
 0x7F, 0x08, 0x08, 0x08, 0x7F,
 0x00, 0x41, 0x7F, 0x41, 0x00,
 0x20, 0x40, 0x41, 0x3F, 0x01,
 0x7F, 0x08, 0x14, 0x22, 0x41,
 0x7F, 0x40, 0x40, 0x40, 0x40,
 0x7F, 0x02, 0x04, 0x02, 0x7F,
 0x7F, 0x04, 0x08, 0x10, 0x7F,
 0x3E, 0x41, 0x41, 0x41, 0x3E,
 0x7F, 0x09, 0x09, 0x09, 0x06,
 0x3E, 0x41, 0x51, 0x21, 0x5E,
 0x7F, 0x09, 0x19, 0x29, 0x46,
 0x46, 0x49, 0x49, 0x49, 0x31,
 0x01, 0x01, 0x7F, 0x01, 0x01,
 0x3F, 0x40, 0x40, 0x40, 0x3F,
 0x1F, 0x20, 0x40, 0x20, 0x1F,
 0x7F, 0x20, 0x18, 0x20, 0x7F,
 0x63, 0x14, 0x08, 0x14, 0x63,
 0x03, 0x04, 0x78, 0x04, 0x03,
 0x61, 0x51, 0x49, 0x45, 0x43,
 0x00, 0x00, 0x7F, 0x41, 0x41,
 0x02, 0x04, 0x08, 0x10, 0x20,
 0x41, 0x41, 0x7F, 0x00, 0x00,
 0x04, 0x02, 0x01, 0x02, 0x04,
 0x40, 0x40, 0x40, 0x40, 0x40,
 0x00, 0x01, 0x02, 0x04, 0x00,
 0x20, 0x54, 0x54, 0x54, 0x78,
 0x7F, 0x48, 0x44, 0x44, 0x38,
 0x38, 0x44, 0x44, 0x44, 0x20,
 0x38, 0x44, 0x44, 0x48, 0x7F,
 0x38, 0x54, 0x54, 0x54, 0x18,
 0x08, 0x7E, 0x09, 0x01, 0x02,
 0x08, 0x14, 0x54, 0x54, 0x3C,
 0x7F, 0x08, 0x04, 0x04, 0x78,
 0x00, 0x44, 0x7D, 0x40, 0x00,
 0x20, 0x40, 0x44, 0x3D, 0x00,
 0x00, 0x7F, 0x10, 0x28, 0x44,
 0x00, 0x41, 0x7F, 0x40, 0x00,
 0x7C, 0x04, 0x18, 0x04, 0x78,
 0x7C, 0x08, 0x04, 0x04, 0x78,
 0x38, 0x44, 0x44, 0x44, 0x38,
 0x7C, 0x14, 0x14, 0x14, 0x08,
 0x08, 0x14, 0x14, 0x18, 0x7C,
 0x7C, 0x08, 0x04, 0x04, 0x08,
 0x48, 0x54, 0x54, 0x54, 0x20,
 0x04, 0x3F, 0x44, 0x40, 0x20,
 0x3C, 0x40, 0x40, 0x20, 0x7C,
 0x1C, 0x20, 0x40, 0x20, 0x1C,
 0x3C, 0x40, 0x30, 0x40, 0x3C,
 0x44, 0x28, 0x10, 0x28, 0x44,
 0x0C, 0x50, 0x50, 0x50, 0x3C,
 0x44, 0x64, 0x54, 0x4C, 0x44,
 0x00, 0x08, 0x36, 0x41, 0x00,
 0x00, 0x00, 0x7F, 0x00, 0x00,
 0x00, 0x41, 0x36, 0x08, 0x00,
 0x08, 0x08, 0x2A, 0x1C, 0x08,
 0x08, 0x1C, 0x2A, 0x08, 0x08
};
#line 1 "c:/pic/tetris/bitmaps.h"




code static const char title_bitmap[] = {

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x7e, 0x7e, 0x7e, 0xfe, 0xfe, 0xfe, 0xfe,
0xfe, 0xfe, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e,
0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e,
0x7e, 0x7e, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0,
0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0xf0, 0xf0, 0xf0,
0xf0, 0xf0, 0xf0, 0x00, 0x00, 0xf0, 0xf0, 0xf0,
0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
0xf0, 0xf0, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0,
0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
0xf0, 0xf0, 0xe0, 0x00, 0x00, 0xf0, 0xf0, 0xf0,
0xf0, 0xf0, 0xf0, 0x00, 0x00, 0xf0, 0xf0, 0xf0,
0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x03, 0x03,
0x03, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0x03, 0x03, 0x03, 0x03, 0x03,
0x03, 0x03, 0x03, 0x00, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0x03, 0x03, 0x03, 0x03, 0x03,
0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0x03, 0x03, 0x03, 0x03, 0x03,
0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xe0, 0xe0,
0xe0, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0,
0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0x00, 0x00, 0x7f, 0xff, 0xff,
0xff, 0xff, 0xff, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0,
0xe0, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0x7f,
0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x7f, 0x7f, 0x7f,
0x7f, 0x7f, 0x7f, 0x70, 0x70, 0x70, 0x70, 0x70,
0x70, 0x70, 0x70, 0x00, 0x7f, 0x7f, 0x7f, 0x7f,
0x7f, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0x7f,
0x7f, 0x7f, 0x7f, 0x01, 0x07, 0x1f, 0x7f, 0x7f,
0x7c, 0x60, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0x7f,
0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x70, 0x70, 0x70,
0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70,
0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
0x30, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38,
0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x3f,
0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x38, 0x38,
0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38,
0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38,
0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38,
0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38,
0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38,
0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38,
0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38,
0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38,
0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38,
0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38,
0x38, 0x30, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00

};
#line 5 "C:/PIC/tetris/ks0108.c"
unsigned short ks0108_x;
unsigned short ks0108_y;
unsigned short ks0108_page;



void ks0108_enable(void)
{
 int i;

  PORTB  |=  0b00010000 ;

 asm nop;
 asm nop;
 asm nop;
 asm nop;

  PORTB  &= ~ 0b00010000 ;


 asm nop;
 asm nop;
 asm nop;
 asm nop;

}


void ks0108_init(void)
{

 ks0108_x = 0;
 ks0108_y = 0;
 ks0108_page = 0;


  TRISD  = 0xff;


  TRISB  = 0x00;


  PORTB  =  0b00100000 ;


 ks0108_command( 0x3f ,  0x00 );
 ks0108_command( 0x3f ,  0x01 );


 ks0108_command( 0xC0 ,  0x00 );
 ks0108_command( 0xC0 ,  0x01 );

}


void ks0108_fill(unsigned char pattern)
{
 unsigned short i, j;
 for (i=0; i<8; i++) {
 ks0108_locate(0, i<<3);
 for (j=0; j<128; j++)
 ks0108_data_write(pattern);

 }
}


void ks0108_locate(unsigned short x, unsigned short y)
{
 unsigned short controller;

 ks0108_x = x;
 ks0108_y = y;


 ks0108_page = (y >> 3);


 if (x >= 64) {
 controller =  0x01 ;
 x -= 64;
 } else {
 controller =  0x00 ;
 }


 ks0108_command( 0xB8  | ks0108_page,  0x00 );
 ks0108_command( 0xB8  | ks0108_page,  0x01 );


 ks0108_command( 0x40  | x, controller);


}


void ks0108_command(unsigned char cmd, unsigned char controller)
{

  PORTB  =  0b00100000 ;


 if (controller ==  0x00 ) {
  PORTB  |=  0b00000010 ;
 } else {
  PORTB  |=  0b00000001 ;
 }


  TRISD  = 0x00;
  PORTD  = cmd;


 ks0108_enable();
}


void ks0108_pset(unsigned short x, unsigned short y, unsigned short c)
{
 char display_data;

 ks0108_locate(x,y);


 ks0108_data_read();
 display_data = ks0108_data_read();


 if (c)
 display_data |= 1 << (y % 8);
 else
 display_data &= ~(1 << (y % 8));


 ks0108_data_write(display_data);
}



void ks0108_rect(unsigned short x, unsigned short y, unsigned short width, unsigned short height, unsigned short c)
{

 unsigned short i,j;
 for (j=y; j<y+height;j++) {

 if ( (j==y) || (j==(y+(height-1))) ) {

 for (i=x; i<x+width;i++) {
 ks0108_pset(i, j, c);
 }
 } else {

 ks0108_pset(x,j,c);
 ks0108_pset(x+(width-1),j,c);
 }
 }

}
#line 206 "C:/PIC/tetris/ks0108.c"
void ks0108_char(unsigned short x, unsigned short y, unsigned char c, unsigned char invert)
{

 unsigned char i,d;
 int j;

 j = c * 5;
 ks0108_locate(x,y);
 for (i=0;i<5;i++) {
 ks0108_data_read();
 d = ks0108_data_read();
 d = (font5x7[j] << (y % 8));
 if (invert)
 d = ~d;
 ks0108_data_write(d);
 j++;
 }
}

void ks0108_char_portrait(unsigned short x, unsigned short y, unsigned short c, unsigned char invert)
{
 unsigned char i,k,d,e,f;
 int j;

 j = (c * 5) + 4;
 for (i=0;i<5;i++) {



 d = (font5x7[j]);
 if (invert)
 d = ~d;

 ks0108_locate(x,y);
 for (k=0; k<7; k++) {
 ks0108_data_read();
 e = ks0108_data_read();
 f = ((d & (1<<k)) >> k) << (i + (y % 8));
 if (i == 0)
 e = f;
 else
 e |= f;
 ks0108_data_write(e);
 }


 if (y % 8) {
 ks0108_locate(x,y+8);
 for (k=0; k<7; k++) {
 ks0108_data_read();
 e = ks0108_data_read();
 e |= (((d & (1<<k)) >> k) << i) >> (8 - (y % 8));
 ks0108_data_write(e);
 }
 }


 j--;
 }
}

void ks0108_title(unsigned short width, unsigned short hpages)
{

 int i,j,k;
 k=0;
 for (i=0; i<hpages; i++) {
 ks0108_locate(0,i<<3);
 for (j=0;j<width;j++) {
 if (j==64)
 ks0108_locate(j,i<<3);
 ks0108_data_write(title_bitmap[k++]);
 }
 }
}


unsigned char ks0108_data_read()
{
 unsigned char display_data;
 unsigned short i;


  PORTD  = 0x00;
  TRISD  = 0xff;


  PORTB  =  0b00100000 ;


 if (ks0108_x >= 64) {
  PORTB  |=  0b00000001 ;
 } else {
  PORTB  |=  0b00000010 ;
 }


  PORTB  |=  0b00000100 ;
  PORTB  |=  0b00001000 ;


  PORTB  |=  0b00010000 ;
 asm nop;
 asm nop;
 asm nop;
 asm nop;


 display_data =  PORTD ;


  PORTB  &= ~ 0b00010000 ;
 asm nop;
 asm nop;
 asm nop;
 asm nop;


 ks0108_locate(ks0108_x, ks0108_y);


 return display_data;

}



void ks0108_data_write(unsigned char d)
{


  PORTB  =  0b00100000 ;


 if (ks0108_x >= 64) {
  PORTB  |=  0b00000001 ;
 } else {
  PORTB  |=  0b00000010 ;
 }


  PORTB  |=  0b00000100 ;


  TRISD  = 0x00;
  PORTD  = d;


 ks0108_enable();


 ks0108_x++;

}
